<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/Haider/Downloads/Portfolio Project/accident.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="6138"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,9:mainaccidents"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="accidents" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="83"/><column index="2" value="64"/><column index="3" value="40"/><column index="4" value="88"/><column index="5" value="72"/><column index="6" value="75"/><column index="7" value="71"/><column index="8" value="65"/><column index="9" value="64"/><column index="10" value="52"/><column index="11" value="88"/><column index="12" value="40"/><column index="13" value="79"/><column index="14" value="115"/><column index="15" value="43"/><column index="16" value="43"/><column index="17" value="54"/><column index="18" value="195"/><column index="19" value="67"/><column index="20" value="195"/><column index="21" value="200"/><column index="22" value="211"/><column index="23" value="53"/><column index="24" value="81"/><column index="25" value="93"/><column index="26" value="300"/><column index="27" value="76"/><column index="28" value="96"/><column index="29" value="228"/><column index="30" value="134"/><column index="31" value="188"/><column index="32" value="146"/><column index="33" value="132"/><column index="34" value="101"/><column index="35" value="88"/><column index="36" value="75"/><column index="37" value="168"/><column index="38" value="64"/><column index="39" value="168"/><column index="40" value="79"/><column index="41" value="68"/><column index="42" value="68"/><column index="43" value="195"/><column index="44" value="69"/><column index="45" value="211"/><column index="46" value="56"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">-- 1. Number of accidents per year

SELECT 
count(PEDS) AS &quot;Accidents&quot;
FROM accidents;


-- 2. Total fatalities per state

SELECT
STATENAME,
sum(FATALS) AS &quot;Fatalities&quot;
FROM accidents
GROUP BY STATENAME
ORDER BY Fatalities desc;


-- 3. Accident frequency by month

SELECT
MONTHNAME AS &quot;Month Name&quot;,
count(*) AS &quot;Accidents&quot;
FROM accidents
GROUP BY MONTHNAME
ORDER BY MONTH asc;


-- 4. Which days of the week have the most accidents

SELECT
DAY_WEEKNAME AS &quot;Day&quot;,
COUNT(*) AS &quot;Accidents&quot;
FROM accidents
GROUP BY DAY_WEEKNAME
ORDER BY DAY_WEEK asc;


-- 5. Rural vs Urban

SELECT
RUR_URBNAME AS &quot;City Geography&quot;,
COUNT(*) AS &quot;Number of Accidents&quot;,
SUM(FATALS) AS &quot;Fatalities&quot;
FROM accidents
WHERE RUR_URBNAME IN (&quot;Rural&quot;, &quot;Urban&quot;)
GROUP BY RUR_URBNAME;


-- 6. Avg number of vehicles involved

SELECT
round(avg(VE_TOTAL),2) AS &quot;Avg Num of Vehicles Involved&quot;
FROM accidents;


-- 7. Number of accidents involving pedestrians

SELECT 
count(*) AS &quot;Accidents Involving Peds&quot;
FROM accidents
WHERE PEDS &gt; 0;


-- 8. Top 10 states with highest fatalities per accident

SELECT
STATENAME,
round(avg(FATALS),3) AS &quot;Avg Fatalities&quot;
FROM accidents
GROUP BY STATENAME
ORDER BY &quot;Avg Fatalities&quot; desc;


-- 9. Number of Accidents (Day vs Night)

SELECT
LGT_CONDNAME AS &quot;Light Condition&quot;,
COUNT(LGT_CONDNAME) AS &quot;Accidents&quot;
FROM accidents
WHERE LGT_CONDNAME NOT IN (&quot;Not Reported&quot;, &quot;Other&quot;, &quot;Reported as Unknown&quot;, &quot;Dark - Unknown Lighting&quot;)
GROUP BY LGT_CONDNAME
ORDER BY &quot;Accidents&quot; desc;


-- 10. Top 5 hours with highest number of accidents

SELECT
CAST(HOUR as TEXT) || &quot;:00&quot; AS &quot;Hour&quot;,
COUNT(HOUR) AS &quot;Accidents&quot;
FROM accidents
WHERE HOUR != 99
GROUP BY HOUR
ORDER BY &quot;Accidents&quot; desc
LIMIT 5;

-- 11. Identify if accidents involving buses are more fatal than others

SELECT 
SCH_BUSNAME,
sum(FATALS) AS &quot;Fatalities&quot;,
round(avg(FATALS),2) as &quot;Avg Fatalities&quot;
FROM accidents
GROUP BY SCH_BUSNAME;


-- 12. Do certain road types have higher fatality rates

SELECT 
FUNC_SYSNAME,
round(avg(FATALS), 2) AS &quot;Avg Fatalities&quot;
FROM accidents
WHERE FUNC_SYSNAME NOT IN (&quot;Trafficway Not in State Inventory&quot;, &quot;Unknown&quot;, &quot;Not Reported&quot;)
GROUP BY FUNC_SYSNAME
ORDER BY &quot;Avg Fatalities&quot;;


-- 13. Accidents by intersections

SELECT 
TYP_INTNAME AS &quot;Intersection&quot;,
sum(FATALS) AS &quot;Fatalities&quot;,
round(avg(FATALS), 2) AS &quot;Avg Fatalities&quot;
FROM accidents
WHERE TYP_INTNAME NOT IN (&quot;Not Reported&quot;, &quot;Reported as Unknown&quot;)
GROUP BY TYP_INTNAME
ORDER BY &quot;Fatalities&quot; desc;


-- 14. Are accidents near junctions more dangerous?

SELECT
RELJCT1NAME AS &quot;Junction&quot;,
round(avg(VE_TOTAL), 2) AS &quot;Avg Num of Vehicles&quot;,
round(avg(FATALS), 2) AS &quot;Avg Fatalities&quot;,
sum(FATALS) AS &quot;Fatalities&quot;
FROM accidents
WHERE RELJCT1NAME NOT IN (&quot;Reported as Unknown&quot;, &quot;Not Reported&quot;)
GROUP BY RELJCT1NAME;

-- 15. Fatalities in weekdays vs weekends


SELECT 
CASE
	WHEN DAY_WEEKNAME IN (&quot;Saturday&quot;, &quot;Sunday&quot;) THEN &quot;Weekend&quot;
	ELSE &quot;Workday&quot;
END AS &quot;Weekday&quot;,
sum(FATALS) AS &quot;Total Fatalities&quot;,
CASE
	WHEN &quot;Weekday&quot; = &quot;Weekend&quot; THEN sum(FATALS) / 2
	ELSE sum(FATALS) / 5
END AS &quot;Weighted Fatalities&quot;,
round(avg(FATALS), 2) AS &quot;Avg Fatalities&quot;,
round(avg(PEDS), 2) AS &quot;Avg Pedestrians&quot;
FROM accidents
GROUP BY &quot;Weekday&quot;
ORDER BY &quot;Total Fatalities&quot; DESC;


-- 16. Find states where the fatalities increased/ decreased over the months


SELECT
STATENAME AS &quot;State&quot;,
Monthname AS &quot;Month&quot;,
sum(FATALS) AS &quot;Fatalities&quot;,
sum(PEDS) AS &quot;Pedestrians&quot;,
round(avg(FATALS), 2) AS &quot;Avg Fatalities&quot;
FROM accidents a
GROUP BY a.Statename, a.MONTHNAME
ORDER BY a.STATENAME, a.MONTH;


-- 17. Pedestrian fatality risk by state

WITH CTE AS (
SELECT
STATENAME AS &quot;State&quot;,
COUNT(*) AS &quot;Total Accidents&quot;,
SUM(FATALS) AS &quot;Total Fatalities&quot;,
(SELECT COUNT(PEDS) FROM accidents a WHERE PEDS &gt; 0 AND a.STATENAME = accidents.STATENAME) AS &quot;Accidents Involving Pedestrians&quot;,
(SELECT SUM(FATALS) FROM accidents a WHERE PEDS &gt; 0 AND a.STATENAME = accidents.STATENAME) AS &quot;Fatalities in Accidents Involving Peds&quot;
FROM accidents
GROUP BY STATENAME)

SELECT 
&quot;State&quot;,
&quot;Total Accidents&quot;,
&quot;Total Fatalities&quot;,
ROUND((&quot;Total Fatalities&quot; - &quot;Fatalities in Accidents Involving Peds&quot;) * 1.0 / (&quot;Total Accidents&quot; - &quot;Accidents Involving Pedestrians&quot;), 2) AS &quot;Non-Pedestrian Accident Fatality Ratio&quot;,
&quot;Accidents Involving Pedestrians&quot;,
&quot;Fatalities in Accidents Involving Peds&quot;,
ROUND(&quot;Fatalities in Accidents Involving Peds&quot; * 1.0/ &quot;Accidents Involving Pedestrians&quot;, 2) AS &quot;Pedestrian Accident Fatality Ratio&quot;
FROM CTE;



-- 18. Fatalities per 100k

SELECT
a.STATENAME AS &quot;State&quot;,
p.&quot;2023&quot; AS &quot;Population&quot;,
SUM(a.FATALS) AS &quot;Total Fatalities&quot;,
ROUND((SUM(a.FATALS) * 1.0/ (replace(p.&quot;2023&quot;, &quot;,&quot;, &quot;&quot;) / 100000)), 2) AS &quot;Fatalities Per 100k&quot;
FROM accidents a JOIN pop_2023 p ON a.STATENAME = p.Region
GROUP BY a.STATENAME;


-- Accidents during holidays/ specific accident types/ hospital response times/ socioeconomic correlation (state income levels)/ time to accident density (traffic volume data)


-- if  the arrival/ notification hour is LOWER than the hour, then it is the next day (its unlikely it is 2+ days). therefore, the day increases by 1


WITH CTE AS (SELECT
STATENAME AS &quot;State&quot;,
ROUND(AVG(((HOSP_HR * 60 + HOSP_MN) - (ARR_HOUR * 60 + ARR_MIN) + 1440) % 1440), 2) AS &quot;EMS Arrival to hospital time&quot;,
ROUND(AVG(((HOSP_HR * 60 + HOSP_MN) - (NOT_HOUR * 60 + NOT_MIN) + 1440) % 1440), 2) AS &quot;Notification to hospital time&quot;
FROM accidents
WHERE ARR_HOUR BETWEEN 0 AND 23
AND ARR_MIN BETWEEN 0 AND 60
AND HOSP_HR BETWEEN 0 AND 23
AND HOSP_MN BETWEEN 0 AND 60
AND NOT_HOUR BETWEEN 0 AND 23
AND NOT_MIN BETWEEN 0 AND 60
AND ARR_HOUR 
AND ((HOSP_HR*60 + HOSP_MN) - (ARR_HOUR*60 + ARR_MIN)) &gt;= 0
AND ((HOSP_HR * 60 + HOSP_MN) - (NOT_HOUR * 60 + NOT_MIN)) &gt;= 0
GROUP BY STATENAME
HAVING ROUND(AVG(((HOSP_HR * 60 + HOSP_MN) - (ARR_HOUR * 60 + ARR_MIN) + 1440) % 1440), 2) &gt; 0
AND ROUND(AVG(((HOSP_HR * 60 + HOSP_MN) - (NOT_HOUR * 60 + NOT_MIN) + 1440) % 1440), 2) &gt; 0)
	
SELECT *,
ROUND(&quot;Notification to hospital time&quot; - &quot;EMS Arrival to hospital time&quot;,2) AS &quot;Notification to EMS Arrival&quot;
FROM CTE;





-- Top Fatality-Causing Accident Types

SELECT
HARM_EVNAME,
COUNT(*) AS &quot;Accidents&quot;,
SUM(FATALS) AS &quot;Fatalities&quot;
FROM accidents
GROUP BY HARM_EVNAME
ORDER BY Accidents DESC;


SELECT 
p.Region,
replace(p.April1st, &quot;,&quot;, &quot;&quot;) AS &quot;April 1st&quot;,
replace(p.&quot;2020&quot;, &quot;,&quot;, &quot;&quot;) AS &quot;2020&quot;,
replace(p.&quot;2021&quot;, &quot;,&quot;, &quot;&quot;) AS &quot;2021&quot;,
replace(p.&quot;2022&quot;, &quot;,&quot;, &quot;&quot;) AS &quot;2022&quot;,
replace(p.&quot;2023&quot;, &quot;,&quot;, &quot;&quot;) AS &quot;2023&quot;
FROM pop_2023 p


</sql><current_tab id="0"/></tab_sql></sqlb_project>
